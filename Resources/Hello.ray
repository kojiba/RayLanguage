#include <stdio.h>

typedef struct SomeType {
    int a;
} SomeType;

class BaseHello {
properties:
    string helloString; // by default is readonly
    void* somePointer;
methods:
    constructor {       // constructor always virtual
        // here calls master.constructor
        return object;
    }
    destructor;         // but destructor always not virtual
    getter(helloString) { //inline if in interface, call not directly, but calls getter
        return object.helloString + "getter";
    }
    setter(helloString);
}

implementation BaseHello {
    destructor {
        delete object.somePointer;
        // here calls master.destructor
    }
    setter(helloString) {
        object.helloString = argument + "setter";
    }
}

class Hello disciple of BaseHello {
properties:
    readonly    int a
    copy        uint b          // getter returns copy
    read, write double d
    float f
    inner       SomeType c

methods:
    constructor: SomeType type {
        
    }

    Hello initWithType: SomeType type
    sayHelloTo: String name, Object identifier, int a

    operator(+) {
        return leftOperand.a + rightOperand.a
    }

    operator(-) {
        return leftOperand.a - rightOperand.a
    }

    operator(++) postfix {
        // has only leftOperand operand
        return leftOperand.a++
    }

    operator(++) prefix {
        // has only rightOperand operand
        return ++rightOperand.b
    }

static:
    SomeType basicType {
        SomeType some;
        return some;
    }
}

implementation Hello {
    Hello initWithType: SomeType type {
        //some here
    }
}

void main() {
    SomeType t
    Hello stackObj : t
    Hello *obj = create 20 Hello
    obj.initWithType: Hello.basicType
    obj.sayHelloTo: "some string", 5, 2

    for(Hello temp in obj) {

    }


    delete obj
    return 0
}